# NY Anti-Malware / Kernel

import os
import io
import datetime
import types
import mmap

import NY_Encrypt
import NY_Encrypt_RSA as rsa

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
# Kernel Class
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
class Kernel :
    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def __init__(self, debug = False) :
        self.debug = debug

        self.plugins_path = None
        self.nyFile_list = []
        self.nyModule_list = []

        self.last_update = datetime.datetime(1980, 1, 1, 0, 0, 0, 0) # Version Information : 1980-01-01

    # ------------------------------------------------------------
    # Input : 
    # Output : True / False
    # ------------------------------------------------------------
    def set_plugins(self, plugins_path) :
        self.plugins_path = plugins_path

        public_path = plugins_path + os.sep + 'key.public'
        rsa_public = rsa.read_key(public_path)
        if not rsa_public :
            print("%%%%%%%% [ ERROR ] %%%%%%%%")
            print(f">>>> Fail to Read RSA Public Key : {public_path}")
            return False
        
        """
        if self.debug :
            print("[ SUCCESS ] Success to Read RSA Public Key")
        """

        nyFile_list_path = plugins_path + os.sep + 'NYAM.ny'
        nyFile_list = self.__get_ny_list(nyFile_list_path, rsa_public)
        if not nyFile_list :
            print("%%%%%%%% ERROR %%%%%%%%")
            print(f">>>> Fail to Get NY File List : {nyFile_list_path}")
            return False
        
        """
        if self.debug :
            print("[ SUCCESS ] Success to Get NY File List")
        """

        if self.debug :
            print("[ Plugin (NY File) List ]")
            print(f"    ( + ) : {self.nyFile_list}")
        
        for ny_name in self.nyFile_list :
            ny_path = plugins_path + os.sep + ny_name
            plugin = NY_Encrypt.NY(ny_path, rsa_public) # Decrypt Plugin (NY File)
            module = NY_Encrypt.load(ny_name.split('.')[0], plugin.body) # Load Plugin
            if module :
                self.nyModule_list.append(module)
                self.__get_last_update(plugin)
        
        if self.debug :
            print("[ Module List ]")
            print(f"    ( + ) : {self.nyModule_list}")

            print(f"[ Last Update ] UTC : {self.last_update.ctime()}")
        
        return True

    # ------------------------------------------------------------
    # Input : 
    # Output : True / False
    # ------------------------------------------------------------
    def __get_ny_list(self, ny_file, rsa_public) :
        nyFiles = []

        DE_nyFiles = NY_Encrypt.NY(ny_file, rsa_public)

        if DE_nyFiles.body :
            fBuf = io.StringIO((DE_nyFiles.body).decode('latin-1'))
            
            while True :
                line = fBuf.readline().strip()

                if not line :
                    break
                # This File is .ny File
                elif line.find('.ny') != -1 :
                    nyFiles.append(line)
                # This File is Not .ny File
                else :
                    continue
        
        if len(nyFiles) :
            self.nyFile_list = nyFiles
            return True
        else :
            return False
    
    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def __get_last_update(self, plugin_info) :
        year, month, day = plugin_info.date
        hour, minute, second = plugin_info.time
        temp_datetime = datetime.datetime(year, month, day, hour, minute, second)

        if self.last_update < temp_datetime :
            self.last_update = temp_datetime

    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def create_instance(self) :
        kernel_instance = KernelInstance(self.plugins_path, self.last_update, self.debug)
        if kernel_instance.create(self.nyModule_list) :
            return kernel_instance
        else :
            return None

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
# Kernel's Instance Class
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
class KernelInstance :
    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def __init__(self, plugins_path, last_update, debug = True) :
        self.debug = debug

        self.plugins_path = plugins_path
        self.NYamMain_list = [] # Plugin's Instance of NYamMain

        self.last_update = last_update

    # ------------------------------------------------------------
    # Input : 
    # Output : True / False
    # ------------------------------------------------------------
    def create(self, nyModule_list) :
        for module in nyModule_list :
            try :
                tempInstance = module.NYamMain()
                self.NYamMain_list.append(tempInstance)
            except AttributeError :
                continue
        
        if len(self.NYamMain_list) :
            if self.debug :
                print(f"[ Number of NYamMain (Instance) ] : {len(self.NYamMain_list)}")
            return True
        else :
            return False
    
    # ------------------------------------------------------------
    # Input : 
    # Output : True / False
    # ------------------------------------------------------------
    def init(self) :
        # When 'init' - True : Real NYamMain Instance
        # When 'init' - False : Not Real NYamMain Instance
        real_NYamMain_list = []

        if self.debug :
            print("[ Result of NYamMain.init() : Success ]")
        
        for instance in self.NYamMain_list :
            try :
                result = instance.init(self.plugins_path)
                if not result :
                    real_NYamMain_list.append(instance)

                    if self.debug :
                        print(f"    ( O ) {instance.__module__}")
            except AttributeError :
                continue
        
        # Update (NYamMain_list)
        self.NYamMain_list = real_NYamMain_list

        if len(self.NYamMain_list) :
            if self.debug :
                print(f"[ Number of NYamMain (Instance) ] : {len(self.NYamMain_list)}")
            return True
        else :
            return False

    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def uninit(self) :
        if self.debug :
            print("[ Result of NYamMain.uninit() : Success / Fail ]")
        
        for instance in self.NYamMain_list :
            try :
                result = instance.uninit()
                if self.debug :
                    if not result :
                        print(f"    ( O ) {instance.__module__}")
                    else :
                        print(f"    ( X ) {instance.__module__}")
            except AttributeError :
                continue
    
    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def get_information(self) :
        information_list = []

        if self.debug :
            print("[ Plugin's Information ]")
        
        for instance in self.NYamMain_list :
            try :
                information = instance.getPluginInformation()
                information_list.append(information)

                if self.debug :
                    print(f"    ( + ) Information - {instance.__module__}")
                    for key in information.keys() :
                        print(f"        ( - ) {key} : {information[key]}")
            except AttributeError :
                continue
        
        return information_list
    
    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def get_malware_list(self, *callback) :
        malware_list = []

        argc = len(callback)
        if argc == 0 :
            callback_function = None
        elif argc == 1 :
            callback_function = callback[0]
        else :
            return []
        
        if self.debug :
            print("[ Plugin's Malware List ]")

        for instance in self.NYamMain_list :
            try :
                temp_malware_list = instance.getMalwareList()

                if isinstance(callback_function, types.FunctionType) :
                    callback_function(instance.__module__, temp_malware_list)
                    continue

                else :
                    malware_list += temp_malware_list

                if self.debug :
                    print(f"    ( + ) Malware List - {instance.__module__}")
                    for malware_name in temp_malware_list :
                        print(f"        ( - ) {malware_name}")

            except AttributeError :
                continue
    
    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def scan(self, fName) :
        if self.debug :
            print("[ Result of NYamMain.scan() ]")

        try :
            result = False
            malware_name = ''
            malware_id = 1
            plugin_id = -1

            fHandle = open(fName, 'rb')
            mm = mmap.mmap(fHandle.fileno(), 0, access = mmap.ACCESS_READ)

            for i, instance in enumerate(self.NYamMain_list) :
                try :
                    result, malware_name, malware_id = instance.scan(fName, mm, debug = False)

                    # Success
                    if result :
                        plugin_id = i
                        if self.debug :
                            print("=>=>=>=> SUCCESS")
                            print(f"    ( + ) Scanned Malware - {instance.__module__}")
                            print(f"        ( - ) {malware_name}")
                        # break
                    
                    # Fail
                    else :
                        if self.debug :
                            print("=>=>=>=> FAIL")
                            print(f"    ( + ) Not Scanned Malware - {instance.__module__}")
                
                except AttributeError :
                    continue
            
            if mm :
                mm.close()
            if fHandle :
                fHandle.close()
            
            return result, malware_name, malware_id, plugin_id
        
        except IOError :
            pass

        return False, '', -1, -1

    # ------------------------------------------------------------
    # Input : 
    # Output : True / False
    # ------------------------------------------------------------
    def clean(self, fName, malware_id, plugin_id) :
        result = False

        if self.debug :
            print("[ Result of NYamMain.clean() ]")
        
        try :
            instance = self.NYamMain_list[plugin_id]
            result = instance.clean(fName, malware_id, debug = False)

            if result :
                if self.debug :
                    print("=>=>=>=> SUCCESS")
                    print(f"    ( + ) Cleaned Malware - {instance.__module__}")            
            else :
                if self.debug :
                    print("=>=>=>=> FAIL")
                    print(f"    ( + ) Not Cleaned Malware - {instance.__module__}")
        
        except AttributeError :
            pass

        return result
