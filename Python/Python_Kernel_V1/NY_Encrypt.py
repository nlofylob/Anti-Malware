import os
import sys
import hashlib
import zlib
import random
import py_compile
import shutil
import struct
import marshal
import importlib
import types

import NY_Time
import encrypt_RC4
import encrypt_RSA

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
# Create NY File (.ny)
# Input : Source File
# Output : True / False
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
def createNY(source_fName, debug = False) :
    fName = source_fName

    # ------------------------------------------------------------
    # Step 1. File (.pyc)
    # ------------------------------------------------------------
    if fName.split('.')[1] == 'py' :
        pyc_name = fName + 'c'
        py_compile.compile(fName, pyc_name, None, True)
    else :
        pyc_name = fName.split('.')[0] + '.pyc'
        shutil.copy(fName, pyc_name)
    
    # ------------------------------------------------------------
    # Step 2. RSA Key Load
    # ------------------------------------------------------------
    rsa_public = encrypt_RSA.read_key('key.public')
    rsa_private = encrypt_RSA.read_key('key.private')
    if debug :
        print()
        print("RSA Key Load - Public : {key}".format(key = rsa_public))
        print("RSA Key Load - Private : {key}".format(key = rsa_private))
        print()

    if not (rsa_public and rsa_private) :
        print("%%%%%%%% ERROR %%%%%%%%")
        print("=>=>=>=> Fail to Load RSA Key")
        return False

    # ------------------------------------------------------------
    # Step 3. Create NY File's (.ny) Header
    # ------------------------------------------------------------
    SIGNATURE = b'NYAM'

    now_date = NY_Time.get_now_date()
    now_time = NY_Time.get_now_time()
    # print("Version Information - Date : {date}".format(date = now_date))
    # print("Version Information - Time : {time}".format(time = now_time))

    value_date = struct.pack('<H', now_date)
    value_time = struct.pack('<H', now_time)
    # print("TYPE - Date : {type}".format(type = type(now_date)))
    # print("TYPE - Time : {type}".format(type = type(now_date)))

    version_info = value_date + value_time + (chr(0) * 28).encode('latin-1')
    if debug :
        print()
        print("[ TYPE ] Version Information : {type}".format(type = type(version_info)))
        print("[ SIZE ] Version Information : {size}".format(size = len(version_info)))
        print()

    ny_data = SIGNATURE + version_info
    if debug :
        print()
        print("[ TYPE ] NY Data (Signature + Version Information) : {type}".format(type = type(ny_data)))
        print("[ SIZE ] NY Data (Signature + Version Information) : {size}".format(size = len(ny_data)))
        print()

    # ------------------------------------------------------------
    # Step 4. Create RC4's Key and Encrypt with RSA
    # ------------------------------------------------------------
    random.seed()

    while 1 :
        temp_ny_data = b'' # Bytes
        rc4_key = '' # String

        # Create RC4's Key (128 Bit)
        for i in range(16) :
            rc4_key += chr(random.randint(0, 0xFF))

        if debug :
            print()
            print("[ TYPE ] (Decrypted) RC4 key : {type}".format(type = type(rc4_key)))
            print("[ SIZE ] (Decrypted) RC4 Key : {size}".format(size = len(rc4_key)))
            print(">>>> (Decrypted) RC4 Key : {key}".format(key = rc4_key.encode('latin-1')))
            print()

        # Encrypt RC4's Key with RSA's Private Key
        EN_rc4_key = encrypt_RSA.crypt(rc4_key, rsa_private)
        # print("RSA Encrypt Result TYPE : {type}".format(type = type(EN_rc4_key)))
        if len(EN_rc4_key) != 32 :
            continue

        # Decrypt RC4's Key with RSA's Public Key
        DE_rc4_key = encrypt_RSA.crypt(EN_rc4_key, rsa_public)
        # print("RSA Decrypt Result TYPE : {type}".format(type = type(DE_rc4_key)))

        # [ Check ] RSA's Encrypt / Decrypt
        if (rc4_key == DE_rc4_key) and (len(rc4_key) == len(DE_rc4_key)) :
            if debug :
                print()
                print("[ TYPE ] (Encrypted) RC4 key : {type}".format(type = type(EN_rc4_key)))
                print("[ SIZE ] (Encrypted) RC4 Key : {size}".format(size = len(EN_rc4_key)))
                print(">>>> (Encrypted) RC4 Key : {key}".format(key = EN_rc4_key.encode('latin-1')))
                print()
            
            temp_ny_data += EN_rc4_key.encode('latin-1')
            # print("TYPE - Temp NY Data : {type}".format(type = type(temp_ny_data)))
            if debug :
                print()
                print("#1-1 : [ SIZE ] En_rc4_key : En_rc4_key = {size}".format(size = len(EN_rc4_key)))
                print("#1-2 : [ SIZE ] temp_ny_data : temp_ny_data = En_rc4_key = {size}".format(size = len(temp_ny_data)))
                print()

            if debug :
                print()
                print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                print("[ Encrypt RC4's Key with RSA ] : SUCCESS")
                print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                print()

            # ------------------------------------------------------------
            # Step 5-1. Compress File (.pyc)
            # Step 5-2. Encrypt File (.pyc) with RC4
            # ------------------------------------------------------------
            before_compress = open(pyc_name, 'rb').read()
            after_compress = zlib.compress(before_compress)

            rc4 = encrypt_RC4.RC4()
            rc4.set_key(rc4_key)
            EN_rc4 = rc4.crypt(after_compress)
            # print("RC4 Encrypt Result TYPE : {type}".format(type = type(EN_rc4)))

            rc4 = encrypt_RC4.RC4()
            rc4.set_key(rc4_key)
            DE_rc4 = rc4.crypt(EN_rc4)
            # print("RC4 Decrypt Result TYPE : {type}".format(type = type(DE_rc4)))

            # [ Check ] RC4's Encrypt / Decrypt
            if DE_rc4 != after_compress :
                if debug :
                    print()
                    print("[ TYPE ] DE_rc4 : {type}".format(type = type(DE_rc4)))
                    print("[ TYPE ] after_compress : {type}".format(type = type(after_compress)))
                    print("---------- ---------- ---------- ----------")
                    print(">>>> DE_rc4 : {test}".format(test = DE_rc4))
                    print("---------- ---------- ---------- ----------")
                    print(">>>> after_comperss : {test}".format(test = after_compress))
                    print("---------- ---------- ---------- ----------")
                    print()
                continue

            if debug :
                print()
                print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                print("[ Encrypt File with RC4 ] : SUCCESS")
                print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                print()

            temp_ny_data += EN_rc4
            # print("TYPE - Temp NY Data : {type}".format(type = type(temp_ny_data)))
            if debug :
                print()
                print("#2-1 : [ SIZE ] EN_rc4 : EN_rc4 = {size}".format(size = len(EN_rc4)))
                print("#2-2 : [ SIZE ] temp_ny_data : temp_ny_data = En_rc4_key + EN_rc4 = {size}".format(size = len(temp_ny_data)))
                print()

            # ------------------------------------------------------------
            # Step 6. Create NY File's (.ny) Footer
            # ------------------------------------------------------------
            md5 = hashlib.md5()
            md5_Hash = ny_data + temp_ny_data
            # print("TYPE - MD5 : {type}".format(type = type(md5_Hash)))

            for i in range(4) :
                md5.update(md5_Hash)
                md5_Hash = md5.hexdigest().encode('latin-1')

            if debug :
                print()
                print("[ TYPE ] MD5 : {type}".format(type = type(md5_Hash)))
                print(">>>> MD5 : {md5}".format(md5 = md5_Hash))
                print()

            # Encrypt MD5's Hash with RSA
            EN_md5_Hash = encrypt_RSA.crypt(md5_Hash, rsa_private)
            # print("[ MD5 : After Encrypt with RSA ]")
            if debug :
                print()
                print("[ TYPE ] (RSA) Encrypted MD5 : {type}".format(type = type(EN_md5_Hash)))
                print(">>>> (RSA) Encrypted MD5 : {md5}".format(md5 = EN_md5_Hash))
                print()
            
            if len(EN_md5_Hash) != 32 :
                continue

            # Decrypt MD5's Hash with RSA
            DE_md5_Hash = (encrypt_RSA.crypt(EN_md5_Hash, rsa_public))
            # print("[ MD5 : After Decrypt with RSA ]")
            if debug :
                print()
                print("[ TYPE ] (RSA) Decrypted MD5 : {type}".format(type = type(DE_md5_Hash)))
                print(">>>> (RSA) Decrypted MD5 : {md5}".format(md5 = DE_md5_Hash))
                print()

            # [ Check ] RSA's Encrypt / Decrypt
            if md5_Hash == DE_md5_Hash.encode('latin-1') :
                if debug :
                    print()
                    print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                    print("[ Encrypt MD5 Hash with RSA ] : SUCCESS")
                    print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                    print()

                ny_data += temp_ny_data + EN_md5_Hash.encode('latin-1')
                if debug :
                    print()
                    print("[ TYPE ] NY Data (Signature + Version Information + Encrypted RC4 Key + Encrypted File Body + Encrypted MD5) : {type}".format(type = type(ny_data)))
                    print("[ SIZE ] NY Data (Signature + Version Information + Encrypted RC4 Key + Encrypted File Body + Encrypted MD5) : {size}".format(size = len(ny_data)))
                    print()
                
                break

    # ------------------------------------------------------------
    # Step 7. Create NY File (.ny)
    # ------------------------------------------------------------
    extension = fName.find('.')
    ny_name = fName[0:extension] + ".ny"

    try :
        if ny_data :
            # Create File (.ny)
            open(ny_name, 'wb').write(ny_data)
            # Remove File (.pyc)
            os.remove(pyc_name)

            if debug :
                print()
                print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                print("[ NY File Create ] : SUCCESS")
                print("=>=>=>=> Before : {before} =>=>=>=> After : {after}".format(before = fName, after = ny_name))
                print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                print()
            
            return True
            
        else :
            raise IOError
    
    except IOError :
        if debug :
            print()
            print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
            print("[ NY File Create ] : FAIL")
            print("=>=>=>=> Before : {before}".format(before = fName))
            print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
            print()

        return False

# ------------------------------------------------------------
# Input : 
# Output : 
# ------------------------------------------------------------
def Ntimes_md5(fBuf, Ntimes) :
    md5 = hashlib.md5()
    md5_Hash = fBuf
    for i in range(Ntimes) :
        md5.update(md5_Hash)
        md5_Hash = md5.hexdigest().encode('latin-1')

    return md5_Hash

# ------------------------------------------------------------
# Input : 
# Output : 
# ------------------------------------------------------------
def NYFileError(Exception) :
    def __init__(self, value) :
        self.value = value
    
    def __str__(self) :
        return repr(self.value)

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
# NY Constant Class
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
class NYConstant :
    NY_SIGNATURE = b'NYAM'

    NY_DATE_OFFSET = 4
    NY_DATE_LENGTH = 2
    NY_TIME_OFFSET = 6
    NY_TIME_LENGTH = 2

    NY_RESERVED_OFFSET = 8
    NY_RESERVED_LENGTH = 28

    NY_RC4_KEY_OFFSET = 36
    NY_RC4_KEY_LENGTH = 32

    NY_MD5_OFFSET = -32

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
# NY Class
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
class NY(NYConstant) :
    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def __init__(self, fName, rsa_public) :
        self.fileName = fName
        self.date = None
        self.time = None
        self.body = None

        self.__ny_data = None
        self.__rsa_public = rsa_public
        self.__rc4_key = None

        if self.fileName :
            self.__decrypt(self.fileName)

    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def __decrypt(self, fName, debug = False) :
        with open(fName, 'rb') as fileHandle :
            if fileHandle.read(4) == self.NY_SIGNATURE :
                self.__ny_data = self.NY_SIGNATURE + fileHandle.read()
                if debug :
                    print()
                    print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                    print("[ 1st NY File Check ] Signature : SUCCESS")
                    print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
                    print()
            else :
                raise NYFileError("%%%%%%%% ERROR %%%%%%%% =>=>=>=> [ 1st NY File Check ] Signature : Fail")
        
        # Read NY File's Date
        temp = self.__ny_data[self.NY_DATE_OFFSET : (self.NY_DATE_OFFSET + self.NY_DATE_LENGTH)]
        self.date = NY_Time.change_date(struct.unpack('<H', temp)[0])
        # print("Version Information - Date : {date}".format(date = self.date))

        # Read NY File's Time
        temp = self.__ny_data[self.NY_TIME_OFFSET : (self.NY_TIME_OFFSET + self.NY_TIME_LENGTH)]
        self.time = NY_Time.change_time(struct.unpack('<H', temp)[0])
        # print("Version Information - Time : {time}".format(time = self.time))

        # [ Check ] MD5
        DE_md5_Hash = self.__get_ny_md5()
        New_md5_Hash = Ntimes_md5(self.__ny_data[:self.NY_MD5_OFFSET], 4)
        if debug :
            print("[ TYPE ] DE_md5_Hash : {type}".format(type = type(DE_md5_Hash)))
            print(">>>> DE_md5_Hash : {md5}".format(md5 = DE_md5_Hash))
            print("[ TYPE ] New_md5_Hash : {type}".format(type = type(New_md5_Hash)))
            print(">>>> New_md5_Hash : {md5}".format(md5 = New_md5_Hash))

        if DE_md5_Hash.encode('latin-1') != New_md5_Hash :
            raise NYFileError("%%%%%%%% ERROR %%%%%%%% =>=>=>=> [ 2nd NY File Check ] MD5 : Fail")

        if debug :
            print()
            print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
            print("[ 2nd NY File Check ] MD5 : SUCCESS")
            print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
            print()

        # Read NY File's RC4
        self.__rc4_key = self.__get_rc4_key(debug)
        if debug :
            print()
            print("[ TYPE ] Decrypted RC4 key : {type}".format(type = type(self.__rc4_key)))
            print("[ SIZE ] Decrypted RC4 Key : {size}".format(size = len(self.__rc4_key)))
            print(">>>> Decrypted RC4 Key : {key}".format(key = (self.__rc4_key).encode('latin-1')))
            print()

        # from Encrypted File Body to Decrypted File Body
        DE_ny_data = self.__get_ny_body()
        if debug :
            print()
            print("[ SIZE ] Decrypted File Body : {size}".format(size = len(DE_ny_data)))
            print(">>>> Decrypted File Body")
            print(DE_ny_data)
            print()
        
        # from Compressed File Body to Decompressed File Body
        self.body = zlib.decompress(DE_ny_data)
        if debug :
            print()
            print("[ SIZE ] Decompressed File Body : {size}".format(size = len(self.body)))
            print(">>>> Decompressed File Body")
            print(self.body)
            print()
    
        if debug:
            print()
            print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
            print("[ NY File Load ] : SUCCESS")
            print("=>=>=>=> File Name : {file}".format(file = fName))
            print("#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#")
            print()

    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def __get_rc4_key(self, debug) :
        EN_rc4_key = self.__ny_data[self.NY_RC4_KEY_OFFSET : (self.NY_RC4_KEY_OFFSET + self.NY_RC4_KEY_LENGTH)]
        if debug :
            print()
            print("[ TYPE ] Encrypted RC4 key : {type}".format(type = type(EN_rc4_key)))
            print("[ SIZE ] Encrypted RC4 Key : {size}".format(size = len(EN_rc4_key)))
            print(">>>> Encrypted RC4 Key : {key}".format(key = EN_rc4_key))
            print()
        DE_rc4_key = encrypt_RSA.crypt(EN_rc4_key, self.__rsa_public)
        if debug :
            print()
            print("[ TYPE ] Type of Decrypted RC4 key : {type}".format(type = type(DE_rc4_key)))
            print("[ SIZE ] Size of Decrypted RC4 Key : {size}".format(size = len(DE_rc4_key)))
            print(">>>> Decrypted RC4 Key : {key}".format(key = (DE_rc4_key).encode('latin-1')))
            print()
        return DE_rc4_key

    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def __get_ny_body(self) :
        EN_ny_data = self.__ny_data[(self.NY_RC4_KEY_OFFSET + self.NY_RC4_KEY_LENGTH) : self.NY_MD5_OFFSET]
        rc4 = encrypt_RC4.RC4()
        rc4.set_key(self.__rc4_key)
        DE_ny_data = rc4.crypt(EN_ny_data)
        return DE_ny_data

    # ------------------------------------------------------------
    # Input : 
    # Output : 
    # ------------------------------------------------------------
    def __get_ny_md5(self) :
        EN_md5 = self.__ny_data[self.NY_MD5_OFFSET:]
        DE_md5 = encrypt_RSA.crypt(EN_md5, self.__rsa_public)
        return DE_md5

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
# Load NY File (.ny)
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
def load(module_name, fBuf) :
    # Check : Python File (.py)
    if fBuf[:4] == importlib.util.MAGIC_NUMBER :
        try :
            code = marshal.loads(fBuf[16:])
            module = types.ModuleType(module_name)
            exec(code, module.__dict__)
            sys.modules[module_name] = module
            return module
        
        except Exception as e:
            print("%%%%%%%% ERROR %%%%%%%%")
            print(f"=>=>=>=> Fail to Load Module with Exception : {e}")
            return None
    
    else :
        return None
