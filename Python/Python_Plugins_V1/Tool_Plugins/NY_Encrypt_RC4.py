#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
# RC4 Class
#   - rc4.set_key()
#   - rc4.crypt()
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#

class RC4 :
    # ------------------------------------------------------------
    # Initialize RC4 Class's Member
    # ------------------------------------------------------------
    def __init__(self) :
        self.__S = []
        self.__T = []
        self.__Key = []
        self.__K_i = 0
        self.__K_j = 0

    # ------------------------------------------------------------
    # Create RC4's Key
    # ------------------------------------------------------------
    def set_key(self, password) :
        for i in range(len(password)) :
            self.__Key.append(ord(password[i]))
        
        self.__init__rc4()

    # [ KSA ] 
    # ------------------------------------------------------------
    # Initialize RC4 Table
    # ------------------------------------------------------------
    def __init__rc4(self) :
        # 1.
        for i in range(256) :
            self.__S.append(i)
            self.__T.append(self.__Key[i % len(self.__Key)])

        # 2.
        temp = 0
        for i in range(256) :
            temp = (temp + self.__S[i] + self.__T[i]) % 256
            self.__swap(i, temp)
    
    # ------------------------------------------------------------
    # Encrypt / Decrypt
    # Input : Bytes
    # Output : Bytes
    # ------------------------------------------------------------
    def crypt(self, input_data) :
        temp_data = []

        # print("[ Debug - TYPE ] input_data : {type}".format(type = type(input_data)))
        # print("[ Debug - TYPE ] input_data[i] : {type}".format(type = type(input_data[0])))
        for i in range(len(input_data)) :
            temp_data.append(input_data[i])
        
        """
        if isinstance(input_data[0], str) :
            for i in range(len(input_data)) :
                temp_data.append(ord(input_data[i]))
                #print(temp_data)
        if isinstance(input_data[0], int) :
            for i in range(len(input_data)) :
                temp_data.append(input_data[i])
                #print(temp_data)
        # [ X ] Type Change : from String to ASCII
        # [ O ] Input Type : Bytes / Output Type : Bytes
        """

        # print("[ Debug - TYPE ] temp_data : {type}".format(type = type(temp_data)))
        # print("[ Debug - TYPE ] temp_data[i] : {type}".format(type = type(temp_data[0])))
        for i in range(len(temp_data)) :
            temp_data[i] ^= self.__create_key_stream()

        result_data = bytearray(b'')
        for i in range(len(temp_data)) :
            result_data.append(temp_data[i])
            # [ X ] Type Change : from ASCII to String
            # [ O ] Input Type : Bytes / Output Type : Bytes

        return bytes(result_data)
    
    # [ PRGA ]
    # ------------------------------------------------------------
    # Create RC4's Key Stream
    # Output : Bytes
    # ------------------------------------------------------------
    def __create_key_stream(self) :
        i = self.__K_i
        j = self.__K_j

        i = (i + 1) % 256
        j = (j + self.__S[i]) % 256
        self.__swap(i, j)

        result = (self.__S[i] + self.__S[j]) % 256

        self.__K_i = i
        self.__K_j = j
        
        return self.__S[result]
    
    # ------------------------------------------------------------
    # Swap : from i to j + from j to i
    # ------------------------------------------------------------
    def __swap(self, i, j) :
        temp = self.__S[i]
        self.__S[i] = self.__S[j]
        self.__S[j] = temp
